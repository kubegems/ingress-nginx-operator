name: Continuous Integration

on:
  push:
    branches:
      - main
    paths-ignore:
      - "docs/**"
      - "examples/**"
      - "**.md"
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
  pull_request:
    branches:
      - main
    types:
      - opened
      - reopened
      - synchronize
    paths-ignore:
      - "docs/**"
      - "examples/**"
      - "**.md"

env:
  platforms: "linux/amd64"

concurrency:
  group: ${{ github.ref_name }}-ci
  cancel-in-progress: true

jobs:
  vars:
    name: Get variables
    runs-on: ubuntu-20.04
    outputs:
      sha_short: ${{ steps.vars.outputs.sha }}
      go_version: ${{ steps.vars.outputs.go_version }}
      repo_name: ${{ steps.vars.outputs.repo }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Output Variables
        id: vars
        run: |
          echo "::set-output name=sha::$(echo ${GITHUB_SHA} | cut -c1-7)"
          echo "::set-output name=go_version::$(grep "go 1." go.mod | cut -d " " -f 2)"
          echo "::set-output name=repo::$(echo ${GITHUB_REPOSITORY} | cut -d '/' -f 2)"

  binary:
    name: Build Binary
    runs-on: ubuntu-20.04
    needs: vars
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Cache Go build
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-local-build-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-local-build-
      - name: Setup Golang Environment
        uses: actions/setup-go@v3
        with:
          go-version: ${{ needs.vars.outputs.go_version }}
      - name: Build Binary
        run: make build

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-20.04
    needs: vars
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Setup Golang Environment
        uses: actions/setup-go@v3
        with:
          go-version: ${{ needs.vars.outputs.go_version }}
      - name: Cache Go tests
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-tests-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-tests-
      - name: Run Tests
        run: make test

  build:
    name: Build Image
    runs-on: ubuntu-20.04
    needs: [binary, vars, unit-tests]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Cache Go build
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-build-
      - name: Setup Golang Environment
        uses: actions/setup-go@v3
        with:
          go-version: ${{ needs.vars.outputs.go_version }}
      - name: Build binaries
        uses: goreleaser/goreleaser-action@v2
        with:
          version: latest
          args: ${{ !startsWith(github.ref, 'refs/tags/') && 'build --snapshot' || 'release' }} ${{ github.event_name == 'pull_request' && '--single-target' || '' }} --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GOPATH: ${{ needs.check.outputs.go_path }}
      - name: DockerHub Login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
        if: github.event_name != 'pull_request'
      - name: Aliyun Login
        uses: docker/login-action@v1
        with:
          registry: registry.cn-beijing.aliyuncs.com
          username: ${{ secrets.SECONDARY_REGISTRY_USERNAME }}
          password: ${{ secrets.SECONDARY_REGISTRY_PASSWORD }}
        if: github.event_name != 'pull_request'
      - name: Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: |
            kubegems/ingress-nginx-operator
            registry.cn-beijing.aliyuncs.com/kubegems/ingress-nginx-operator
          tags: |
            type=edge
            type=ref,event=pr
            type=semver,pattern={{version}}
          labels: |
            org.opencontainers.image.title=Ingress Nginx Operator
            org.opencontainers.image.description=The Ingress Nginx Operator is the operator for Kubernetes Ingress NGINX Controller
            org.opencontainers.image.vendor=kubegems.io

      - name: Output Variables
        id: var
        run: |
          version=${{ steps.meta.outputs.version }}
          if ${{ startsWith(github.ref, 'refs/tags/') }}; then
              operator_version=v$version
          else
              tag=$(git describe --tags --abbrev=0)
              operator_version=$tag-$version-${{ needs.vars.outputs.sha_short }}
          fi
          echo "::set-output name=version::$operator_version"
      - name: Build Image
        uses: docker/build-push-action@v2
        with:
          context: "."
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: goreleaser
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: ${{ github.event_name != 'pull_request' && env.platforms || '' }}
          load: ${{ github.event_name == 'pull_request' }}
          push: ${{ github.event_name != 'pull_request' }}
          pull: true
          build-args: |
            VERSION=${{ steps.var.outputs.version }}
